/*! simple-js-validator 2.0.0 2021-10-01 */

"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.assertIsEmpty=exports.assertIsNotEmpty=exports.assertIsNotDefined=exports.assertIsDefined=exports.isNotEmptyObject=exports.isEmptyObject=exports.isNotObject=exports.isObject=exports.isNotUniqueObject=exports.isUniqueObject=exports.isNAN=exports.isNotEmptyArray=exports.isEmptyArray=exports.isNotArray=exports.isArray=exports.isFalse=exports.isTrue=exports.isNotDefined=exports.isDefined=exports.isNotEmpty=exports.isEmpty=void 0;const isEmpty=t=>void 0===t||(null===t||(!!(0,exports.isNAN)(t)||(""===t||0!==t&&(!1!==t&&(!(0,exports.isUniqueObject)(t)&&(!!(0,exports.isEmptyObject)(t)||!!(0,exports.isEmptyArray)(t)))))));exports.isEmpty=isEmpty;const isNotEmpty=t=>!(0,exports.isEmpty)(t);exports.isNotEmpty=isNotEmpty;const isDefined=t=>void 0!==t&&(null!==t&&(!(0,exports.isNAN)(t)&&(""===t||0===t||!1===t||(0,exports.isObject)(t)||(0,exports.isArray)(t),!0)));exports.isDefined=isDefined;const isNotDefined=t=>!(0,exports.isDefined)(t);exports.isNotDefined=isNotDefined;const isTrue=t=>!0===t||(1===t||(!(!t||"string"!=typeof t||"true"!==t.toLowerCase())||!(!t||"string"!=typeof t||"t"!==t.toLowerCase())));exports.isTrue=isTrue;const isFalse=t=>!1===t||(0===t||(!(!t||"string"!=typeof t||"false"!==t.toLowerCase())||!(!t||"string"!=typeof t||"f"!==t.toLowerCase())));exports.isFalse=isFalse;const isArray=t=>!!(t&&"object"==typeof t&&void 0!==t.length&&0<=t.length);exports.isArray=isArray;const isNotArray=t=>!(0,exports.isArray)(t);exports.isNotArray=isNotArray;const isEmptyArray=t=>!(!(0,exports.isArray)(t)||void 0===t.length||0!==t.length);exports.isEmptyArray=isEmptyArray;const isNotEmptyArray=t=>!!((0,exports.isArray)(t)&&void 0!==t.length&&0<t.length);exports.isNotEmptyArray=isNotEmptyArray;const isNAN=t=>!("number"!=typeof t||!isNaN(t));exports.isNAN=isNAN;const isUniqueObject=t=>"object"==typeof t&&-1<Object.prototype.toString.call(t).indexOf("[object ")&&"[object Object]"!==Object.prototype.toString.call(t)&&"[object Array]"!==Object.prototype.toString.call(t);exports.isUniqueObject=isUniqueObject;const isNotUniqueObject=t=>!(0,exports.isUniqueObject)(t);exports.isNotUniqueObject=isNotUniqueObject;const isObject=t=>!!(t&&"object"==typeof t&&(0,exports.isNotArray)(t)&&(0,exports.isNotUniqueObject)(t));exports.isObject=isObject;const isNotObject=t=>!(0,exports.isObject)(t);exports.isNotObject=isNotObject;const isEmptyObject=t=>!(!(0,exports.isObject)(t)||0!==Object.keys(t).length);exports.isEmptyObject=isEmptyObject;const isNotEmptyObject=t=>!!((0,exports.isObject)(t)&&0<Object.keys(t).length);exports.isNotEmptyObject=isNotEmptyObject;const assertIsDefined=(t,s)=>{if((0,exports.isNotDefined)(s))throw new Error(`${t} is not defined.`)};exports.assertIsDefined=assertIsDefined;const assertIsNotDefined=(t,s)=>{if((0,exports.isDefined)(s))throw new Error(`${t} is defined.`)};exports.assertIsNotDefined=assertIsNotDefined;const assertIsNotEmpty=(t,s)=>{if((0,exports.isEmpty)(s))throw new Error(`${t} is empty.`)};exports.assertIsNotEmpty=assertIsNotEmpty;const assertIsEmpty=(t,s)=>{if((0,exports.isNotEmpty)(s))throw new Error(`${t} is not empty.`)};exports.assertIsEmpty=assertIsEmpty,exports.default={isArray:exports.isArray,isDefined:exports.isDefined,assertIsDefined:exports.assertIsDefined,isEmpty:exports.isEmpty,assertIsEmpty:exports.assertIsEmpty,isEmptyArray:exports.isEmptyArray,isEmptyObject:exports.isEmptyObject,isFalse:exports.isFalse,isNAN:exports.isNAN,isNotArray:exports.isNotArray,isNotDefined:exports.isNotDefined,assertIsNotDefined:exports.assertIsNotDefined,isNotEmpty:exports.isNotEmpty,assertIsNotEmpty:exports.assertIsNotEmpty,isNotEmptyArray:exports.isNotEmptyArray,isNotEmptyObject:exports.isNotEmptyObject,isNotObject:exports.isNotObject,isNotUniqueObject:exports.isNotUniqueObject,isObject:exports.isObject,isTrue:exports.isTrue,isUniqueObject:exports.isUniqueObject};